#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from functions import *

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/tmp/xcurrent.txt", "w")                
    fxdesired = open("/tmp/xdesired.txt", "w")
    fq = open("/tmp/q.txt", "w")

    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['joint_0_s','joint_1_s','joint_2_l','joint_3_u','joint_4_r','joint_5_b','joint_6_t']

    # Desired position
    xd = np.array([0.0, -0.2, 1.2])
    # Initial configuration
    q0 = np.array([0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

    # Resulting initial position (end effector with respect to the base link)
    T = fkine_mmgp8(q0)
    x0 = T[0:3,3]

    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0

    # Frequency (in Hz) and control period 
    freq = 30.0
    dt = 1.0/freq
    rate = rospy.Rate(freq)
    
    rospy.sleep(1)
    # Initial joint configuration
    q = copy(q0)
    eps = 0.001
    K = 20.0
    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for position (complete here)
        # -----------------------------
        J = jacobian_position(q)
        T = fkine_mmgp8(q)
        x = T[0:3,3]
        e = x-xd
        Jt = np.linalg.pinv(J)
        q = q - K*dt*Jt.dot(e)
        
        # -----------------------------
        # Limites
        if(q[0]<-0.5000): q[0]=-0.5000
        if(q[0]> 0.5000): q[0]=0.5000

        if(q[1]<-2.9670): q[1]=-2.9670
        if(q[1]> 2.9670): q[1]=2.9670

        if(q[2]<-1.1344): q[2]=-1.1344
        if(q[2]> 2.5307): q[2]=2.5307

        if(q[3]<-1.2217): q[3]=-1.2217
        if(q[3]> 3.3161): q[3]=3.3161

        if(q[4]<-3.3161): q[4]=-3.3161
        if(q[4]> 3.3161): q[4]=3.3161

        if(q[5]<-2.3561): q[5]=-2.3561
        if(q[5]> 2.3561): q[5]=2.3561

        if(q[6]<-6.2944): q[6]=-6.2944
        if(q[6]> 6.2944): q[6]=6.2944

        # Log values                                                      
        fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
                 str(q[4])+" "+str(q[5])+" "+str(q[6])+"\n")
        
        
        # Publish the message
        jstate.position = q
        T = fkine_mmgp8(q)
        x = T[0:3,3]
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)
        
        print(q)
        if np.linalg.norm(e)<eps:
            break
        
        # Wait for the next iteration
        rospy.sleep(1)
    
    print('ending motion ...')
    fxcurrent.close()
    fxdesired.close()
    fq.close()