#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from functions import *

if __name__ == '__main__':
    
    rospy.init_node("testForwardKine")
    pub = rospy.Publisher('joint_states', JointState, queue_size=1)
    bmarker = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['joint_0_s','joint_1_s','joint_2_l','joint_3_u','joint_4_r','joint_5_b','joint_6_t']
    # Joint Configuration
    q = np.array([0.2, 0.66, 0.2, 0, 0.2, 0.1, 0.2])
    # Object (message) whose type is JointState
    jstate = JointState()
    # Set values to the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q
    pub.publish(jstate)

    # Loop rate (in Hz)
    rate = rospy.Rate(100)
    rate.sleep()

    # End effector with respect to the base
    T = fkine_mmgp8(q)
    print( np.round(T, 3) )
    bmarker.position(T)


    # Loop rate (in Hz)
    rate = rospy.Rate(100)
    # Continuous execution loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publish the message
        pub.publish(jstate)
        bmarker.publish()
        # Wait for the next iteration
        rate.sleep()

